// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cxxnet/cxxnet.proto

#ifndef PROTOBUF_cxxnet_2fcxxnet_2eproto__INCLUDED
#define PROTOBUF_cxxnet_2fcxxnet_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/config.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace CXXNET {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cxxnet_2fcxxnet_2eproto();
void protobuf_AssignDesc_cxxnet_2fcxxnet_2eproto();
void protobuf_ShutdownFile_cxxnet_2fcxxnet_2eproto();

class Config;
class Call;

enum Call_Command {
  Call_Command_RUN = 1
};
bool Call_Command_IsValid(int value);
const Call_Command Call_Command_Command_MIN = Call_Command_RUN;
const Call_Command Call_Command_Command_MAX = Call_Command_RUN;
const int Call_Command_Command_ARRAYSIZE = Call_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* Call_Command_descriptor();
inline const ::std::string& Call_Command_Name(Call_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    Call_Command_descriptor(), value);
}
inline bool Call_Command_Parse(
    const ::std::string& name, Call_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Call_Command>(
    Call_Command_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string args = 2;
  inline bool has_args() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 2;
  inline const ::std::string& args() const;
  inline void set_args(const ::std::string& value);
  inline void set_args(const char* value);
  inline void set_args(const char* value, size_t size);
  inline ::std::string* mutable_args();
  inline ::std::string* release_args();
  inline void set_allocated_args(::std::string* args);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.Config)
 private:
  inline void set_has_args();
  inline void clear_has_args();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* args_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class Call : public ::google::protobuf::Message {
 public:
  Call();
  virtual ~Call();

  Call(const Call& from);

  inline Call& operator=(const Call& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Call& default_instance();

  void Swap(Call* other);

  // implements Message ----------------------------------------------

  Call* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Call& from);
  void MergeFrom(const Call& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Call_Command Command;
  static const Command RUN = Call_Command_RUN;
  static inline bool Command_IsValid(int value) {
    return Call_Command_IsValid(value);
  }
  static const Command Command_MIN =
    Call_Command_Command_MIN;
  static const Command Command_MAX =
    Call_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    Call_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return Call_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return Call_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return Call_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.CXXNET.Call.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::CXXNET::Call_Command cmd() const;
  inline void set_cmd(::PS::CXXNET::Call_Command value);

  // @@protoc_insertion_point(class_scope:PS.CXXNET.Call)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cxxnet_2fcxxnet_2eproto();
  friend void protobuf_AssignDesc_cxxnet_2fcxxnet_2eproto();
  friend void protobuf_ShutdownFile_cxxnet_2fcxxnet_2eproto();

  void InitAsDefaultInstance();
  static Call* default_instance_;
};
// ===================================================================


// ===================================================================

// Config

// optional string args = 2;
inline bool Config::has_args() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_args() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_args() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_args() {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    args_->clear();
  }
  clear_has_args();
}
inline const ::std::string& Config::args() const {
  return *args_;
}
inline void Config::set_args(const ::std::string& value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void Config::set_args(const char* value) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(value);
}
inline void Config::set_args(const char* value, size_t size) {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  args_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Config::mutable_args() {
  set_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    args_ = new ::std::string;
  }
  return args_;
}
inline ::std::string* Config::release_args() {
  clear_has_args();
  if (args_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = args_;
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Config::set_allocated_args(::std::string* args) {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (args) {
    set_has_args();
    args_ = args;
  } else {
    clear_has_args();
    args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Call

// required .PS.CXXNET.Call.Command cmd = 1;
inline bool Call::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Call::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Call::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Call::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::CXXNET::Call_Command Call::cmd() const {
  return static_cast< ::PS::CXXNET::Call_Command >(cmd_);
}
inline void Call::set_cmd(::PS::CXXNET::Call_Command value) {
  assert(::PS::CXXNET::Call_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CXXNET
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::CXXNET::Call_Command>() {
  return ::PS::CXXNET::Call_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cxxnet_2fcxxnet_2eproto__INCLUDED
